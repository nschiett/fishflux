[{"path":[]},{"path":"/LICENSE.html","id":"the-mit-license-mit","dir":"","previous_headings":"","what":"The MIT License (MIT)","title":"Package licensed under the “MIT License (MIT)”","text":"Copyright (c) 2020 Nina Schiettekatte Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/intro_to_fishflux.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Intro to fishflux","text":"fishflux package provides tool model fluxes C (carbon), N (nitrogen) P (phosphorus) fishes. combines basic principles elemental stoichiometry metabolic theory. package offers user-friendly interface apply model. fishflux ideal fish ecologists wishing predict ingestion, egestion excretion study fluxes nutrients energy. Main assets: Provides function model fluxes Carbon, Nitrogen Phosphorus fishes Allows estimation uncertainty, dpending uncertainy input parameters Provides functions help find parameters inputs model Provides functions extract illustrate results","code":""},{"path":"/articles/intro_to_fishflux.html","id":"installing-and-loading-fishflux","dir":"Articles","previous_headings":"","what":"Installing and loading fishflux","title":"Intro to fishflux","text":"fishflux uses Markov Chain Monte Carlo simulations provided stan. Therefore, first step install rstan. ’s important closely follow steps described page depending operating system.","code":""},{"path":"/articles/intro_to_fishflux.html","id":"cran","dir":"Articles","previous_headings":"Installing and loading fishflux","what":"CRAN","title":"Intro to fishflux","text":"can install fishflux CRAN:","code":"install.packages(\"fishflux\")"},{"path":"/articles/intro_to_fishflux.html","id":"downloaded-package-file","dir":"Articles","previous_headings":"Installing and loading fishflux","what":"Downloaded package file","title":"Intro to fishflux","text":"Another option download source file available GitHub .","code":"install.packages(path_to_fishflux_file, repos = NULL, type = \"source\")"},{"path":"/articles/intro_to_fishflux.html","id":"how-to-use-fishflux","dir":"Articles","previous_headings":"","what":"How to use fishflux?","title":"Intro to fishflux","text":"fishflux designed follow three simple steps: Find right input parameters Run model simulation input parameters Plot model results check sensitivity","code":""},{"path":"/articles/intro_to_fishflux.html","id":"input-parameters","dir":"Articles","previous_headings":"How to use fishflux?","what":"Input parameters","title":"Intro to fishflux","text":"running model, parameters specified. , table showing parameters needed run model simulation. fishflux provides several functions find parameters, note others provided user stage. Ideally, parameters also standard deviation, uncertainty can reflected model predictions . Overview inputs, including input parameters, specified user model. k indicates c, n p. VBGC = von Bertalanffy growth curve. good place start checking using correct scientific name species interest. function name_errors tell species name correct. function can useful, especially working larger databases. species names verified /corrected can continue specifying parameters. find_lw function searches FishBase find length-weight relationship parameters lw_a lw_b extracted Froese Pauly (2018). model uses parameters von Bertalanffy’s growth model (VBGM) estimate growth rates. quick way get available information FishBase function growth_params(). can good indication, users interpret estimates critical eye, come disparate sources varying accuracy. Alternatively, advised use growth curves derived otolith readings. absence otolith data, one might consider extracting standardised estimations Morais Bellwood (2018). , couple basic functions get indication parameters available FishBase trophic_level() aspect_ratio(). Note always better get approximations analysis, measurements otolith analysis parameters extracted functions, growth_params(), trophic_level() aspect_ratio(). get overview parameters available, fishflux provides wrapper function model_parameters(). parameters provided user. information acquire parameters, take look (“paper” add reference methods paper).","code":"library(fishflux) # example name_errors(\"Zebrazoma scopas\") #> Joining with `by = join_by(Subfamily, GenCode, FamCode)` #> Joining with `by = join_by(FamCode)` #> Joining with `by = join_by(Order, Ordnum, Class, ClassNum)` #> Joining with `by = join_by(Class, ClassNum)` #> Inaccurate species names found: #> [1] \"Zebrazoma scopas\" # example find_lw(\"Zebrasoma scopas\", mirror = \"se\") #>            species   lwa_m      lwa_sd lwb_m    lwb_sd #> 1 Zebrasoma scopas 0.02512 0.002709184  2.98 0.0255102 # example # The option otolith=TRUE filters out sources that used otoliths for the estimation of growth parameters growth_params(\"Sargocentron microstoma\", otolith = FALSE) #> # A tibble: 1 × 7 #>   species                 Locality                 k  Linf    t0 method comments #>   <chr>                   <chr>                <dbl> <dbl> <dbl> <chr>  <chr>    #> 1 Sargocentron microstoma Tiahura reef, Moore…     1  18.6    NA lengt… NA # example zebsco <- model_parameters(\"Zebrasoma scopas\", family = \"Acanthuridae\",                            temp = 27, mirror = \"se\") ## Here we set the temperature at 27 degrees as an example, this the average sea temperature in Moorea, French Polynesia print(zebsco) #>            species    t0 Linf     k     asp troph   lwa_m      lwa_sd lwb_m #> 1 Zebrasoma scopas -0.49 13.3 0.425 2.02091     2 0.02512 0.002709184  2.98 #>      lwb_sd     mdw_m        f0_m        f0_sd alpha_m   alpha_sd #> 1 0.0255102 0.2504833 0.001517989 3.032338e-10    0.77 0.05286288"},{"path":"/articles/intro_to_fishflux.html","id":"run-model","dir":"Articles","previous_headings":"How to use fishflux?","what":"Run model","title":"Intro to fishflux","text":"parameters collected, can run model cnp_model_mcmc(). Note model can run without specifying standard deviation (sd) parameter. sd certain parameter provided, automatically set low value (1-10). mentioned , advisable include uncertainty parameters. fishflux designed use MCMC sampler order include uncertainty predictions. object model now contains samples generated MCMC simulation summary parameters generated. extract certain variables interest, use extract() function. Predictions fluxes C, N P g / day.","code":"## load the example parameters for Zebrasoma scopas, a list data(param_zebsco) ## Run the model, specifying the target length(s) and the parameter list model <- cnp_model_mcmc(TL = 5:20, param = param_zebsco) #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.006 seconds (Sampling) #> Chain 1:                0.006 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in FUN(X[[i]], ...): not inputting certain parameters may give wrong #> results #> Warning in FUN(X[[i]], ...): adding standard values for mdw_m #> Warning in FUN(X[[i]], ...): adding standard values for lt_sd #> Warning in FUN(X[[i]], ...): adding standard values for ac_sd #> Warning in FUN(X[[i]], ...): adding standard values for an_sd #> Warning in FUN(X[[i]], ...): adding standard values for ap_sd #> Warning in FUN(X[[i]], ...): adding standard values for linf_sd #> Warning in FUN(X[[i]], ...): adding standard values for theta_sd #> Warning in FUN(X[[i]], ...): adding standard values for r_sd #> Warning in FUN(X[[i]], ...): adding standard values for h_sd #> Warning in FUN(X[[i]], ...): adding standard values for mdw_sd #> Warning in FUN(X[[i]], ...): adding standard values for v_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: extract(model, c(\"Fn\",\"Fp\")) #>    TL      Fn_mean    Fn_median        Fn_sd      Fn_2.5%    Fn_97.5% #> 1   5 0.0009010635 0.0008278347 0.0004502803 0.0002016293 0.001920226 #> 2   6 0.0012989518 0.0012221403 0.0005896832 0.0003933311 0.002681194 #> 3   7 0.0018422094 0.0017212341 0.0008888692 0.0005201163 0.003848947 #> 4   8 0.0025248818 0.0023664143 0.0011534565 0.0007707068 0.005134750 #> 5   9 0.0033644609 0.0030681415 0.0016874092 0.0008692989 0.007398493 #> 6  10 0.0044443797 0.0040649294 0.0022744271 0.0013194511 0.010099679 #> 7  11 0.0058875437 0.0049602815 0.0033201788 0.0013854354 0.013881377 #> 8  12 0.0078001227 0.0065913831 0.0046684970 0.0018548380 0.019043212 #> 9  13 0.0087213690 0.0075491551 0.0054424419 0.0017058162 0.021830698 #> 10 14 0.0112868393 0.0097421459 0.0071878501 0.0022496385 0.028370663 #> 11 15 0.0136333888 0.0121064013 0.0084771668 0.0028431770 0.034161261 #> 12 16 0.0160105979 0.0140342741 0.0107527321 0.0032732025 0.042219737 #> 13 17 0.0185597875 0.0161833618 0.0125352979 0.0033693269 0.050026314 #> 14 18 0.0220967193 0.0192911980 0.0137527456 0.0052595701 0.053368409 #> 15 19 0.0275317026 0.0240602150 0.0167914365 0.0073370324 0.066204283 #> 16 20 0.0302908437 0.0251190165 0.0189360821 0.0078941990 0.078721202 #>          Fn_25%      Fn_75%      Fp_mean    Fp_median        Fp_sd      Fp_2.5% #> 1  0.0005884732 0.001147101 7.611302e-05 4.229078e-05 9.807818e-05 1.855395e-06 #> 2  0.0008894202 0.001598991 1.568292e-04 8.512694e-05 1.925444e-04 4.554854e-06 #> 3  0.0011732542 0.002352337 2.823103e-04 1.575974e-04 3.260226e-04 8.782313e-06 #> 4  0.0016959105 0.003198846 4.570487e-04 2.579212e-04 4.641573e-04 1.984802e-05 #> 5  0.0021894243 0.004239735 7.147047e-04 4.390443e-04 7.109660e-04 2.764786e-05 #> 6  0.0027775896 0.005711608 1.100530e-03 8.019599e-04 9.512854e-04 4.304105e-05 #> 7  0.0033700090 0.008065420 1.569162e-03 1.094920e-03 1.333218e-03 1.233464e-04 #> 8  0.0044473700 0.010413853 2.353175e-03 1.865874e-03 1.895908e-03 1.494422e-04 #> 9  0.0044523033 0.011980457 2.725679e-03 2.187711e-03 2.185622e-03 1.947421e-04 #> 10 0.0053826652 0.015291616 3.749209e-03 3.141747e-03 2.927928e-03 2.939146e-04 #> 11 0.0069573071 0.018268117 4.731656e-03 4.086874e-03 3.420222e-03 4.749224e-04 #> 12 0.0074466287 0.021529332 5.803223e-03 5.018180e-03 4.291471e-03 7.686315e-04 #> 13 0.0083479492 0.025346305 6.981131e-03 5.934317e-03 5.046870e-03 1.075005e-03 #> 14 0.0116802423 0.029388723 8.526939e-03 7.342653e-03 5.477839e-03 1.701011e-03 #> 15 0.0142071864 0.038413132 1.094467e-02 9.482896e-03 6.690857e-03 2.903531e-03 #> 16 0.0152631155 0.042276326 1.204453e-02 9.893959e-03 7.575983e-03 3.101391e-03 #>        Fp_97.5%       Fp_25%       Fp_75% #> 1  0.0003460986 2.269377e-05 7.754904e-05 #> 2  0.0007659397 4.044727e-05 1.872539e-04 #> 3  0.0011862582 7.327798e-05 3.782476e-04 #> 4  0.0016763002 1.398968e-04 6.306931e-04 #> 5  0.0025407028 1.935196e-04 1.025836e-03 #> 6  0.0034377047 3.358332e-04 1.645739e-03 #> 7  0.0049658928 5.241776e-04 2.377930e-03 #> 8  0.0069482282 8.785415e-04 3.423485e-03 #> 9  0.0080381976 9.620628e-04 3.870301e-03 #> 10 0.0107825137 1.334210e-03 5.299402e-03 #> 11 0.0133869460 2.097661e-03 6.559011e-03 #> 12 0.0166599734 2.265807e-03 7.973511e-03 #> 13 0.0191786120 2.989362e-03 9.749874e-03 #> 14 0.0208189873 4.404817e-03 1.143562e-02 #> 15 0.0265367851 5.596057e-03 1.522032e-02 #> 16 0.0313446026 6.025547e-03 1.665133e-02"},{"path":"/articles/intro_to_fishflux.html","id":"plot-results","dir":"Articles","previous_headings":"How to use fishflux?","what":"Plot results","title":"Intro to fishflux","text":"visualize main outputs model, fishflux contains plotting function. function limitation() returns proportion iterations model simulation limitation C, N P respectively. function plot_cnp() plots predicted output model.","code":"## limitation limitation(model) #>    tl nutrient prop_lim #> 1   5        c    0.000 #> 2   6        c    0.000 #> 3   7        c    0.000 #> 4   8        c    0.000 #> 5   9        c    0.000 #> 6  10        c    0.000 #> 7  11        c    0.000 #> 8  12        c    0.000 #> 9  13        c    0.002 #> 10 14        c    0.012 #> 11 15        c    0.020 #> 12 16        c    0.042 #> 13 17        c    0.082 #> 14 18        c    0.114 #> 15 19        c    0.142 #> 16 20        c    0.168 #> 17  5        n    0.292 #> 18  6        n    0.390 #> 19  7        n    0.470 #> 20  8        n    0.524 #> 21  9        n    0.604 #> 22 10        n    0.694 #> 23 11        n    0.724 #> 24 12        n    0.802 #> 25 13        n    0.796 #> 26 14        n    0.818 #> 27 15        n    0.854 #> 28 16        n    0.850 #> 29 17        n    0.832 #> 30 18        n    0.836 #> 31 19        n    0.846 #> 32 20        n    0.818 #> 33  5        p    0.708 #> 34  6        p    0.610 #> 35  7        p    0.530 #> 36  8        p    0.476 #> 37  9        p    0.396 #> 38 10        p    0.306 #> 39 11        p    0.276 #> 40 12        p    0.198 #> 41 13        p    0.202 #> 42 14        p    0.170 #> 43 15        p    0.126 #> 44 16        p    0.108 #> 45 17        p    0.086 #> 46 18        p    0.050 #> 47 19        p    0.012 #> 48 20        p    0.014 ## Plot one variable: plot_cnp(model,  y = \"Fp\", x = \"tl\", probs = c(0.5, 0.8, 0.95)) ## Plot multiple variables: plot_cnp(model,  y = c(\"Fp\", \"Gp\", \"Ip\", \"Wp\"), x = \"tl\", probs = 0.5)"},{"path":"/articles/intro_to_fishflux.html","id":"sensitivity","dir":"Articles","previous_headings":"How to use fishflux?","what":"Sensitivity","title":"Intro to fishflux","text":"function sensitivity() looks distribution input variables affects uncertainty model predictions. Basically, model run input parameter, keeping others fixed. output function gives matrix width 95% CI model predictions (columns), depending input variables (rows). input parameters output variables interest can specified arguments “par” “” respectively.","code":"sensitivity(TL = 10, param = list(k_sd = 0.2, Dn_sd = 0.2, Dc_sd = 0.1),             par = c(\"k_sd\",\"Dn_sd\",\"Dc_sd\"),              out = c(\"Ic\", \"In\", \"Ip\", \"Gc\")) #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): not inputting #> certain parameters may give wrong results #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ac_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for an_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ap_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dc_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dn_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dp_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for linf_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for k_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for t0_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for theta_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for r_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for h_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwa_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwb_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for mdw_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for v_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0nz_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0pz_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qc_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qn_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qp_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for alpha_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for f0_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lt_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ac_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for an_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ap_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dp_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for linf_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for t0_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for theta_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for r_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for h_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwa_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwb_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for mdw_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for v_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0nz_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0pz_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qc_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qn_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qp_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for alpha_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for f0_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): not inputting #> certain parameters may give wrong results #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ac_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for an_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ap_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dc_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dn_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dp_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for linf_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for k_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for t0_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for theta_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for r_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for h_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwa_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwb_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for mdw_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for v_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0nz_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0pz_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qc_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qn_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qp_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for alpha_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for f0_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lt_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ac_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for an_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ap_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dp_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for linf_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for t0_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for theta_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for r_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for h_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwa_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwb_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for mdw_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for v_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0nz_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0pz_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qc_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qn_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qp_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for alpha_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for f0_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): not inputting #> certain parameters may give wrong results #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ac_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for an_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ap_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dc_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dn_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dp_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for linf_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for k_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for t0_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for theta_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for r_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for h_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwa_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwb_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for mdw_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for v_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0nz_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0pz_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qc_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qn_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qp_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for alpha_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for f0_m #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lt_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ac_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for an_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for ap_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Dp_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for linf_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for t0_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for theta_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for r_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for h_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwa_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for lwb_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for mdw_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for v_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0nz_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for F0pz_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qc_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qn_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for Qp_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for alpha_sd #> Warning in cnp_mcmc(TL, param, iter, params_st, cor, ...): adding standard #> values for f0_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1: #>            Ic_CI        In_CI        Ip_CI        Gc_CI #> k_sd  0.03296944 3.956333e-03 1.318778e-03 1.266026e-02 #> Dn_sd 0.24950299 3.859819e-03 9.980120e-03 6.731756e-11 #> Dc_sd 0.01112390 2.464069e-10 8.188419e-11 6.544082e-11"},{"path":"/articles/intro_to_fishflux.html","id":"more-information","dir":"Articles","previous_headings":"","what":"More information","title":"Intro to fishflux","text":"information theoretical framework model, see Schiettekatte et al. (2020) ( paper ). Every function fishflux help page documentation. case errors, bugs discomfort, invited raise issue GitHub. fishflux always development happy take comments suggestions consideration.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nina M. D. Schiettekatte. Author, maintainer. Diego Barneche. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schiettekatte, N.M., Barneche, D.R., Villéger, S., Allgeier, J.E., Burkepile, D.E., Brandl, S.J., Casey, J.M., Mercière, ., Munsterman, K.S., Morat, F. Parravicini, V., Nutrient limitation, bioenergetics, stoichiometry: new model predict elemental fluxes mediated fishes. Funct Ecol. 2020;00:1-13 https://doi.org/10.1111/1365-2435.13618","code":"@Article{,   title = {Nutrient limitation, bioenergetics, and stoichiometry: a new model to predict elemental fluxes mediated by fishes},   author = {Schiettekatte N.M.D and Barneche D.R. and Villéger S. and Allgeier J.E. and Burkepile D.E. and Brandl S.J. and Casey J.M. and Mercière A. and Munsterman K.S. and Morat F. and Parravicini V.},   journal = {Functional ecology},   year = {2020},   doi = {10.1111/1365-2435.13618},   encoding = {UTF-8}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Model Elemental Fluxes in Fishes","text":"fishflux package provides tool model fluxes C (carbon), N (nitrogen) P (phosphorus) fishes. combines basic principles elemental stoichiometry metabolic theory. package offers user-friendly interface apply model. fishflux ideal fish ecologists wishing predict ingestion, egestion excretion study fluxes elements. Main assets: Provides function model fluxes carbon, nitrogen phosphorus fishes Allows estimation uncertainty, depending uncertainty input parameters Provides functions help find parameters inputs model Provides functions extract illustrate results","code":""},{"path":"/index.html","id":"theoretical-framework","dir":"","previous_headings":"","what":"Theoretical framework","title":"Model Elemental Fluxes in Fishes","text":"information theoretical framework behind cnp_model_mcmc(), check paper.","code":""},{"path":"/index.html","id":"installing-and-loading-fishflux","dir":"","previous_headings":"","what":"Installing and loading fishflux","title":"Model Elemental Fluxes in Fishes","text":"First, make sure R version 3.4 higher rtools installed.","code":""},{"path":"/index.html","id":"cran","dir":"","previous_headings":"Installing and loading fishflux","what":"CRAN","title":"Model Elemental Fluxes in Fishes","text":"fishflux now available CRAN: Note using linux operating system, still need c++ compiler install package CRAN. using Windows Mac, can install pre-compiled binary version thus don’t need compiler.","code":"install.packages(\"fishflux\") library(fishflux)"},{"path":"/index.html","id":"github","dir":"","previous_headings":"Installing and loading fishflux","what":"GitHub","title":"Model Elemental Fluxes in Fishes","text":"Please follow steps install development version package Github. fishflux uses Markov Chain Monte Carlo simulations provided stan. Therefore, first step install rstan. ’s important closely follow steps described page depending operating system, rstan requires functioning C++ compiler. Furthermore, fishflux depends package rstantools version 2.0.0 higher. means already older version rstantools installed, reinstall , prior installation fishflux. c++ compiler set correctly, ready install GitHub.","code":"install.packages(\"devtools\") devtools::install_github(\"nschiett/fishflux\", dependencies=TRUE) library(fishflux)"},{"path":"/index.html","id":"downloaded-package-file","dir":"","previous_headings":"Installing and loading fishflux","what":"Downloaded package file","title":"Model Elemental Fluxes in Fishes","text":"Another option download source file available github .","code":"install.packages(path_to_fishflux_file, repos = NULL, type = \"source\") library(fishflux)"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Model Elemental Fluxes in Fishes","text":"See package vignette introduction help pages. information theoretical model see .","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Model Elemental Fluxes in Fishes","text":"R package provided use MIT License (MIT) author.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Model Elemental Fluxes in Fishes","text":"using bioenergetic model featured package, please cite: Schiettekatte, NMD, Barneche, DR, Villéger, S, et al. Nutrient limitation, bioenergetics stoichiometry: new model predict elemental fluxes mediated fishes. Funct Ecol. 2020; 34: 1857– 1869. https://doi.org/10.1111/1365-2435.13618","code":""},{"path":"/reference/aspect_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to find aspect ratio — aspect_ratio","title":"A function to find aspect ratio — aspect_ratio","text":"function find aspect ratio species either species genus level using rfishbase. returns data frame containing aspect ratio level aspect ratio found (species genus).","code":""},{"path":"/reference/aspect_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to find aspect ratio — aspect_ratio","text":"","code":"aspect_ratio(sp)"},{"path":"/reference/aspect_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to find aspect ratio — aspect_ratio","text":"sp character value containing species name","code":""},{"path":"/reference/aspect_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to find aspect ratio — aspect_ratio","text":"dataframe species, aspect ratio taxonomy level.","code":""},{"path":"/reference/aspect_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to find aspect ratio — aspect_ratio","text":"","code":"if (FALSE) { # \\dontrun{ library(fishflux) library(dplyr) aspect_ratio(\"Lutjanus griseus\") lapply(c(\"Chlorurus spilurus\",\"Zebrasoma scopas\"), aspect_ratio) %>%   bind_rows(.id = \".id\") } # }"},{"path":"/reference/check_name_fishbase.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns error if name is incorrect — check_name_fishbase","title":"Returns error if name is incorrect — check_name_fishbase","text":"wrapper function return error (via name_errors) provided species name wrong.","code":""},{"path":"/reference/check_name_fishbase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns error if name is incorrect — check_name_fishbase","text":"","code":"check_name_fishbase(sp)"},{"path":"/reference/check_name_fishbase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns error if name is incorrect — check_name_fishbase","text":"sp character value containing species name","code":""},{"path":"/reference/check_name_fishbase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns error if name is incorrect — check_name_fishbase","text":"returns error species name wrong.","code":""},{"path":"/reference/check_name_fishbase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns error if name is incorrect — check_name_fishbase","text":"","code":"if (FALSE) { # \\dontrun{ library(fishflux) check_name_fishbase(\"Lutjanus griseus\") } # }"},{"path":"/reference/cnp_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"cnp_mcmc — cnp_mcmc","title":"cnp_mcmc — cnp_mcmc","text":"cnp_mcmc","code":""},{"path":"/reference/cnp_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cnp_mcmc — cnp_mcmc","text":"","code":"cnp_mcmc(TL, param, iter, params_st, cor, ...)"},{"path":"/reference/cnp_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cnp_mcmc — cnp_mcmc","text":"TL Total length(s) cm param List parameter means (add \"_m\") standard deviations (add \"_sd\") Default parameters set low sd's. parameters: Qc_m, Qc_sd: percentage C dry mass fish Qn_m, Qn_sd: percentage N dry mass fish Qp_m, Qp_sd: percentage P dry mass fish Dc_m, Dc_sd: percentage C dry mass food Dn_m, Dn_sd: percentage N dry mass food Dp_m, Dp_sd: percentage P dry mass food ac_m, ac_sd: C-specific assimilation efficiency an_m, an_sd: N-specific assimilation efficiency ap_m, ap_sd: P-specific assimilation efficiency linf_m, linf_sd: Von Bertalanffy Growth parameter, theoretical maximum size TL (cm) k_m, k_sd: Von Bertalanffy Growth parameter, growth rate (yr^-1) t0_m, tO_sd: Von Bertalanffy Growth parameter (yr) lwa_m, lwa_sd: Parameter length-weight relationship (g cm^-1) lwb_m, lwb_sd: Parameter length-weight relationship mdw_m, wprop_sd: Ratio dry weight wet weight fish F0nz_m, F0nz_sd: N-specific turnover rate F0pz_m, F0pz_sd: P-specific turnover rate f0_m, f0_sd: Metabolic normalisation constant independent body mass (g C g^-alpha d^-1) alpha_m, alpha_sd: Metabolic rate mass-scaling exponent theta_m, theta_sd: Activity scope r_m, r_sd: Aspect ratio caudal fin h_m, h_sd: Trophic level v_m, v_sd: Environmental temperature (degrees celcius) iter positive integer specifying number iterations. default 2000. params_st Standard parameters. cor list correlations certain parameters: ro_Qc_Qn, ro_Qc_Qp, ro_Qn_Qp, ro_Dc_Dn, ro_Dc_Dp, ro_Dn_Dp, ro_lwa_lwb, ro_alpha_f0 ... Additional arguments rstan::sampling, see ?rstan:sampling","code":""},{"path":"/reference/cnp_model_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to predict N and P excretion, CNP egestion, CNP ingestion rate, using MCMC and stan — cnp_model_mcmc","title":"A function to predict N and P excretion, CNP egestion, CNP ingestion rate, using MCMC and stan — cnp_model_mcmc","text":"function combines MTE stoichiometric theory order predict nescessary ingestion excretion processes. probability distribution obtained including uncertainty parameters using MCMC sampling stan.","code":""},{"path":"/reference/cnp_model_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to predict N and P excretion, CNP egestion, CNP ingestion rate, using MCMC and stan — cnp_model_mcmc","text":"","code":"cnp_model_mcmc(   TL,   param,   iter = 1000,   cor = list(ro_Qc_Qn = 0.5, ro_Qc_Qp = -0.3, ro_Qn_Qp = -0.2, ro_Dc_Dn = 0.2, ro_Dc_Dp =     -0.1, ro_Dn_Dp = -0.1, ro_lwa_lwb = 0.9, ro_alpha_f0 = 0.9),   ... )"},{"path":"/reference/cnp_model_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to predict N and P excretion, CNP egestion, CNP ingestion rate, using MCMC and stan — cnp_model_mcmc","text":"TL Total length(s) cm param List parameter means (add \"_m\") standard deviations (add \"_sd\") Default parameters set low sd's. parameters: Qc_m, Qc_sd: percentage C dry mass fish Qn_m, Qn_sd: percentage N dry mass fish Qp_m, Qp_sd: percentage P dry mass fish Dc_m, Dc_sd: percentage C dry mass food Dn_m, Dn_sd: percentage N dry mass food Dp_m, Dp_sd: percentage P dry mass food ac_m, ac_sd: C-specific assimilation efficiency an_m, an_sd: N-specific assimilation efficiency ap_m, ap_sd: P-specific assimilation efficiency linf_m, linf_sd: Von Bertalanffy Growth parameter, theoretical maximum size TL (cm) k_m, k_sd: Von Bertalanffy Growth parameter, growth rate (yr^-1) t0_m, tO_sd: Von Bertalanffy Growth parameter (yr) lwa_m, lwa_sd: Parameter length-weight relationship (g cm^-1) lwb_m, lwb_sd: Parameter length-weight relationship mdw_m, wprop_sd: Ratio dry weight wet weight fish F0nz_m, F0nz_sd: N-specific turnover rate F0pz_m, F0pz_sd: P-specific turnover rate f0_m, f0_sd: Metabolic normalisation constant independent body mass (g C g^-alpha d^-1) alpha_m, alpha_sd: Metabolic rate mass-scaling exponent theta_m, theta_sd: Activity scope r_m, r_sd: Aspect ratio caudal fin h_m, h_sd: Trophic level v_m, v_sd: Environmental temperature (degrees celcius) iter positive integer specifying number iterations. default 2000. cor list correlations certain parameters: ro_Qc_Qn, ro_Qc_Qp, ro_Qn_Qp, ro_Dc_Dn, ro_Dc_Dp, ro_Dn_Dp, ro_lwa_lwb, ro_alpha_f0 ... Additional arguments rstan::sampling, see ?rstan:sampling","code":""},{"path":"/reference/cnp_model_mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to predict N and P excretion, CNP egestion, CNP ingestion rate, using MCMC and stan — cnp_model_mcmc","text":"Returns list two objects: stanfit object data.frame summary model components. See extract extract summary predicted variables limitation get information limiting element.","code":""},{"path":"/reference/cnp_model_mcmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to predict N and P excretion, CNP egestion, CNP ingestion rate, using MCMC and stan — cnp_model_mcmc","text":"","code":"library(fishflux) model <- cnp_model_mcmc(TL = 10, param = list( Qc_m = 40, Qn_m = 10, Qp_m = 4, theta_m = 3)) #> Warning: not inputting certain parameters may give wrong results #> Warning: adding standard values for ac_m #> Warning: adding standard values for an_m #> Warning: adding standard values for ap_m #> Warning: adding standard values for Dc_m #> Warning: adding standard values for Dn_m #> Warning: adding standard values for Dp_m #> Warning: adding standard values for linf_m #> Warning: adding standard values for k_m #> Warning: adding standard values for t0_m #> Warning: adding standard values for r_m #> Warning: adding standard values for h_m #> Warning: adding standard values for lwa_m #> Warning: adding standard values for lwb_m #> Warning: adding standard values for mdw_m #> Warning: adding standard values for v_m #> Warning: adding standard values for F0nz_m #> Warning: adding standard values for F0pz_m #> Warning: adding standard values for alpha_m #> Warning: adding standard values for f0_m #> Warning: adding standard values for lt_sd #> Warning: adding standard values for ac_sd #> Warning: adding standard values for an_sd #> Warning: adding standard values for ap_sd #> Warning: adding standard values for Dc_sd #> Warning: adding standard values for Dn_sd #> Warning: adding standard values for Dp_sd #> Warning: adding standard values for linf_sd #> Warning: adding standard values for k_sd #> Warning: adding standard values for t0_sd #> Warning: adding standard values for theta_sd #> Warning: adding standard values for r_sd #> Warning: adding standard values for h_sd #> Warning: adding standard values for lwa_sd #> Warning: adding standard values for lwb_sd #> Warning: adding standard values for mdw_sd #> Warning: adding standard values for v_sd #> Warning: adding standard values for F0nz_sd #> Warning: adding standard values for F0pz_sd #> Warning: adding standard values for Qc_sd #> Warning: adding standard values for Qn_sd #> Warning: adding standard values for Qp_sd #> Warning: adding standard values for alpha_sd #> Warning: adding standard values for f0_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:"},{"path":"/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to extract specific model output parameters from result — extract","title":"A function to extract specific model output parameters from result — extract","text":"function extract specific model output parameters result","code":""},{"path":"/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to extract specific model output parameters from result — extract","text":"","code":"extract(mod, par)"},{"path":"/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to extract specific model output parameters from result — extract","text":"mod Output cnp_mod_mcmc() par Character vector specifying output parameter returned.","code":""},{"path":"/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to extract specific model output parameters from result — extract","text":"Main model output parameters: F0c: C-specific minimal inorganic flux (g/day) F0n: N-specific minimal inorganic flux (g/day) F0p: P-specific minimal inorganic flux (g/day) Gc: Carbon-specific growth rate (g/day) Gn: Nitrogen-specific growth rate (g/day) Gp: Phosphorus-specific growth rate (g/day) Sc: C-specific minimal supply rate (g/day) Sn: N-specific minimal supply rate (g/day) Sp: P-specific minimal supply rate (g/day) Ic: Ingestion rate C (g/day) : Ingestion rate N (g/day) Ip: Ingestion rate P (g/day) Wc: Egestion rate C (g/day) Wn: Egestion rate N (g/day) Wp: Egestion rate P (g/day) Fc: Total inorganic flux C (respiration) (g/day) Fn: Total inorganic flux N (excretion) (g/day) Fp: Total inorganic flux P (excretion) (g/day) Returns data.frame summary selected output parameters","code":""},{"path":"/reference/extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to extract specific model output parameters from result — extract","text":"","code":"model <- cnp_model_mcmc(TL = 5:10, param = list(Qc_m = 40, Qn_m = 10, Qp_m = 4)) extract(model, c(\"Fn\",\"Fp\"))"},{"path":"/reference/find_lw.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to find length-weight relationship parameters a and b — find_lw","title":"A function to find length-weight relationship parameters a and b — find_lw","text":"function find estimates length-weight relationship parameters available fishbase. returns list means standard deviations b obtained : Froese, R., J. Thorson R.B. Reyes Jr., 2013. Bayesian approach estimating length-weight relationships fishes. J. Appl. Ichthyol. (2013):1-7. Please cite Froese et al. (2013), using values. default mirror fishbase set \"se\", please change needed","code":""},{"path":"/reference/find_lw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to find length-weight relationship parameters a and b — find_lw","text":"","code":"find_lw(sp, mirror = \"se\")"},{"path":"/reference/find_lw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to find length-weight relationship parameters a and b — find_lw","text":"sp charachter value containing species name mirror Mirror fishbase (eg. \"se\", \"org\", \"us\", etc.) Default ","code":""},{"path":"/reference/find_lw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to find length-weight relationship parameters a and b — find_lw","text":"dataframe means standard deviations length-weight parameters","code":""},{"path":"/reference/find_lw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to find length-weight relationship parameters a and b — find_lw","text":"","code":"# \\donttest{ library(fishflux) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # find length-weight relationship parameters for one species find_lw(\"Lutjanus griseus\") #>            species   lwa_m      lwa_sd lwb_m     lwb_sd #> 1 Lutjanus griseus 0.01479 0.001030612  2.97 0.01020408  # find length-weight relationship parameters for multiple species and return #   in data.frame lapply(c(\"Chlorurus spilurus\",\"Zebrasoma scopas\"), find_lw) %>%   dplyr::bind_rows() #>              species   lwa_m      lwa_sd lwb_m     lwb_sd #> 1 Chlorurus spilurus 0.01259 0.004918367  3.03 0.07653061 #> 2   Zebrasoma scopas 0.02512 0.002709184  2.98 0.02551020 # }"},{"path":"/reference/fishflux-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'fishflux' package. — fishflux-package","title":"The 'fishflux' package. — fishflux-package","text":"fishflux package provides tool model fluxes C (carbon), N (nitrogen) P (phosphorus) fish. combines basic principles elemental stoichiometry metabolic theory. package offers user-friendly interface make nutrient dynamic modelling available anyone. fishflux mostly targeted towards fish ecologists, wishing predict nutrient ingestion, egestion excretion study fluxes nutrients energy. Main assets: Provides functions model fluxes Carbon, Nitrogen Phosphorus fish without MCMC sampler provided stan. Provides tools find right parameters inputs model Provides plotting function illustrate results","code":""},{"path":[]},{"path":"/reference/fishflux-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'fishflux' package. — fishflux-package","text":"Maintainer: Nina M. D. Schiettekatte nina.schiettekatte@gmail.com Authors: Diego Barneche d.barneche@aims.gov.au","code":""},{"path":"/reference/growth_params.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to find growth parameters on fishbase — growth_params","title":"A function to find growth parameters on fishbase — growth_params","text":"function find growth parameters species using rfishbase. returns data frame containing K, t0 Linf, source. function useful see available fishbase. Nevertheless, strongly recommend check source use otolith based studies.","code":""},{"path":"/reference/growth_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to find growth parameters on fishbase — growth_params","text":"","code":"growth_params(sp, otolith = TRUE)"},{"path":"/reference/growth_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to find growth parameters on fishbase — growth_params","text":"sp charachter value containing species name otolith logical value. TRUE, results otolith analysis returned. false, growth studies returned.","code":""},{"path":"/reference/growth_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to find growth parameters on fishbase — growth_params","text":"dataframe available growth rate parameters fishbase.","code":""},{"path":"/reference/growth_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to find growth parameters on fishbase — growth_params","text":"","code":"if (FALSE) { # \\dontrun{ library(fishflux) growth_params(\"Lutjanus griseus\") } # }"},{"path":"/reference/limitation.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to evaluate element limitation of the model — limitation","title":"A function to evaluate element limitation of the model — limitation","text":"function allows extract proportions iterations c, n p limiting element model.","code":""},{"path":"/reference/limitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to evaluate element limitation of the model — limitation","text":"","code":"limitation(mod, plot = TRUE)"},{"path":"/reference/limitation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to evaluate element limitation of the model — limitation","text":"mod Model output cnp_model_mcmc(). plot Argument specify results shown plot.","code":""},{"path":"/reference/limitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to evaluate element limitation of the model — limitation","text":"Returns data frame : tl Total length, cm nutrient c, n p prop_lim proportion iterations limitation element","code":""},{"path":"/reference/limitation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to evaluate element limitation of the model — limitation","text":"","code":"library(fishflux) mod <- cnp_model_mcmc(TL = 5, param = list(Qc_m = 40, Qn_m = 10, Qp_m = 4,                                            Dc_sd = 0.1, Dn_sd = 0.05, Dp_sd = 0.05)) #> Warning: not inputting certain parameters may give wrong results #> Warning: adding standard values for ac_m #> Warning: adding standard values for an_m #> Warning: adding standard values for ap_m #> Warning: adding standard values for Dc_m #> Warning: adding standard values for Dn_m #> Warning: adding standard values for Dp_m #> Warning: adding standard values for linf_m #> Warning: adding standard values for k_m #> Warning: adding standard values for t0_m #> Warning: adding standard values for theta_m #> Warning: adding standard values for r_m #> Warning: adding standard values for h_m #> Warning: adding standard values for lwa_m #> Warning: adding standard values for lwb_m #> Warning: adding standard values for mdw_m #> Warning: adding standard values for v_m #> Warning: adding standard values for F0nz_m #> Warning: adding standard values for F0pz_m #> Warning: adding standard values for alpha_m #> Warning: adding standard values for f0_m #> Warning: adding standard values for lt_sd #> Warning: adding standard values for ac_sd #> Warning: adding standard values for an_sd #> Warning: adding standard values for ap_sd #> Warning: adding standard values for linf_sd #> Warning: adding standard values for k_sd #> Warning: adding standard values for t0_sd #> Warning: adding standard values for theta_sd #> Warning: adding standard values for r_sd #> Warning: adding standard values for h_sd #> Warning: adding standard values for lwa_sd #> Warning: adding standard values for lwb_sd #> Warning: adding standard values for mdw_sd #> Warning: adding standard values for v_sd #> Warning: adding standard values for F0nz_sd #> Warning: adding standard values for F0pz_sd #> Warning: adding standard values for Qc_sd #> Warning: adding standard values for Qn_sd #> Warning: adding standard values for Qp_sd #> Warning: adding standard values for alpha_sd #> Warning: adding standard values for f0_sd #>  #> SAMPLING FOR MODEL 'cnpmodelmcmc' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0.005 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:  limitation(mod) #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?  #>   tl nutrient prop_lim #> 1  5        c    0.000 #> 2  5        n    0.662 #> 3  5        p    0.338"},{"path":"/reference/metabolic_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Data with metabolic parameters on family level — metabolic_parameters","title":"Data with metabolic parameters on family level — metabolic_parameters","text":"Data frame containing means sd b0 several fish families, extracted Barneche & Allen (2018) paramaters can used calculations metabolic rate case respirometry data available.","code":""},{"path":"/reference/metabolic_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data with metabolic parameters on family level — metabolic_parameters","text":"","code":"data(metabolic_parameters)"},{"path":"/reference/metabolic_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data with metabolic parameters on family level — metabolic_parameters","text":"object class data.frame 20 rows 5 columns.","code":""},{"path":"/reference/metabolic_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data with metabolic parameters on family level — metabolic_parameters","text":"","code":"data(metabolic_parameters)"},{"path":"/reference/metabolic_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to calculate metabolic rates — metabolic_rate","title":"A function to calculate metabolic rates — metabolic_rate","text":"model parameters estimated Barneche & Allen 2018 Ecology Letters doi: 10.1111/ele.12947. parameters best model (Model 2 paper online supplementary material) fish resting metabolic rates reported paper, also includes trophic level covariate.","code":""},{"path":"/reference/metabolic_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to calculate metabolic rates — metabolic_rate","text":"","code":"metabolic_rate(temp, troph, asp, B0, m_max, m, a, growth_g_day, f)"},{"path":"/reference/metabolic_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to calculate metabolic rates — metabolic_rate","text":"temp Temperature degrees Celsius troph Trophic level (1 5) asp caudal fin aspect ratio , proxy activity level B0 Constant resting metabolic rate. NA, function calculate average. m_max Maximum biomass fish (g) m Wet weight fish (g) Resting metabolic rate mass-scaling exponent growth_g_day Daily growth grams wet weight f Activity scope (1 4)","code":""},{"path":"/reference/metabolic_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to calculate metabolic rates — metabolic_rate","text":"dataframe metabolic rates.","code":""},{"path":"/reference/metabolic_rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to calculate metabolic rates — metabolic_rate","text":"Barneche & Allen 2018 Ecology Letters doi: 10.1111/ele.12947. parameters best model (Model 2 paper online supplementary material) fish resting metabolic rates reported paper, also includes trophic level covariate.","code":"All model parameters below were estimated by"},{"path":"/reference/metabolic_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to calculate metabolic rates — metabolic_rate","text":"","code":"library(fishflux) fishflux::metabolic_rate(temp = 27, m_max = 600, m = 300, asp = 3, troph = 2, f = 2, growth_g_day = 0.05, B0 = 0.2, a = 0.6 ) #>   Total_metabolic_rate_C_g_d Total_metabolic_rate_j_d #> 1                   9.288811                 362263.6 #>   Resting_metabolic_rate_j_d Cost_growth_j_g #> 1                   181131.8        16.42453"},{"path":"/reference/metabolism.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to estimate f0 and alpha — metabolism","title":"A function to estimate f0 and alpha — metabolism","text":"model parameters estimated Barneche & Allen 2018 Ecology Letters doi: 10.1111/ele.12947. parameters best model (Model 2 paper online supplementary material) fish resting metabolic rates reported paper, also includes trophic level covariate.","code":""},{"path":"/reference/metabolism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to estimate f0 and alpha — metabolism","text":"","code":"metabolism(family, temp, troph_m, troph_sd = 1e-10)"},{"path":"/reference/metabolism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to estimate f0 and alpha — metabolism","text":"family family fish temp Temperature degrees Celsius troph_m Trophic level mean (1 5) troph_sd Trophic level sd (optional)","code":""},{"path":"/reference/metabolism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to estimate f0 and alpha — metabolism","text":"dataframe predicted metabolic parameters.","code":""},{"path":"/reference/metabolism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to estimate f0 and alpha — metabolism","text":"Barneche & Allen 2018 Ecology Letters doi: 10.1111/ele.12947. parameters best model (Model 2 paper online supplementary material) fish resting metabolic rates reported paper, also includes trophic level covariate.","code":"All model parameters below were estimated by"},{"path":"/reference/metabolism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to estimate f0 and alpha — metabolism","text":"","code":"library(fishflux) metabolism(family = \"Pomacentridae\", temp = 27, troph_m = 2) #> values for b0 and alpha on family level #>  #> SAMPLING FOR MODEL 'getB0' NOW (CHAIN 1). #> Chain 1: Iteration:   1 / 1000 [  0%]  (Sampling) #> Chain 1: Iteration: 100 / 1000 [ 10%]  (Sampling) #> Chain 1: Iteration: 200 / 1000 [ 20%]  (Sampling) #> Chain 1: Iteration: 300 / 1000 [ 30%]  (Sampling) #> Chain 1: Iteration: 400 / 1000 [ 40%]  (Sampling) #> Chain 1: Iteration: 500 / 1000 [ 50%]  (Sampling) #> Chain 1: Iteration: 600 / 1000 [ 60%]  (Sampling) #> Chain 1: Iteration: 700 / 1000 [ 70%]  (Sampling) #> Chain 1: Iteration: 800 / 1000 [ 80%]  (Sampling) #> Chain 1: Iteration: 900 / 1000 [ 90%]  (Sampling) #> Chain 1: Iteration: 1000 / 1000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0 seconds (Warm-up) #> Chain 1:                0 seconds (Sampling) #> Chain 1:                0 seconds (Total) #> Chain 1:  #>          f0_m      f0_sd   alpha_m  alpha_sd        b0_m        b0_sd #> 1 0.004571898 0.00205812 0.4256931 0.1035894 0.001415727 0.0006612888"},{"path":"/reference/model_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to find a set of parameters — model_parameters","title":"A function to find a set of parameters — model_parameters","text":"function find set parameters","code":""},{"path":"/reference/model_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to find a set of parameters — model_parameters","text":"","code":"model_parameters(sp, family, otolith = TRUE, temp, ...)"},{"path":"/reference/model_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to find a set of parameters — model_parameters","text":"sp Species name family family otolith TRUE FALSE, TRUE, function search fishbase growth parameters based upon otolith analysis temp temperature ... Additional arguments find_lw.","code":""},{"path":"/reference/model_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to find a set of parameters — model_parameters","text":"Returns dataframe parameters can estimated","code":""},{"path":"/reference/model_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to find a set of parameters — model_parameters","text":"","code":"if (FALSE) { # \\dontrun{ library(fishflux) model_parameters(sp = \"Scarus psittacus\", family = \"Scaridae\", temp = 27)} # }"},{"path":"/reference/name_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to find errors in fish species names — name_errors","title":"A function to find errors in fish species names — name_errors","text":"function allows check errors fish species list returns inaccurate scientific names","code":""},{"path":"/reference/name_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to find errors in fish species names — name_errors","text":"","code":"name_errors(sp)"},{"path":"/reference/name_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to find errors in fish species names — name_errors","text":"sp vector containing scientific species names.","code":""},{"path":"/reference/name_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to find errors in fish species names — name_errors","text":"vector incorrect species names.","code":""},{"path":"/reference/name_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to find errors in fish species names — name_errors","text":"","code":"if (FALSE) { # \\dontrun{ library(fishflux) name_errors(c(\"Chlorurus spilurus\", \"Zebrasoma scopas\")) name_errors(c(\"Chlorurus spilurus\", \"Zebrasoma copas\"))} # }"},{"path":"/reference/param_zebsco.html","id":null,"dir":"Reference","previous_headings":"","what":"List of all parameters needed to run cnp_model for Zebrasoma scopas — param_zebsco","title":"List of all parameters needed to run cnp_model for Zebrasoma scopas — param_zebsco","text":"List parameters needed run cnp_model Zebrasoma scopas","code":""},{"path":"/reference/param_zebsco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of all parameters needed to run cnp_model for Zebrasoma scopas — param_zebsco","text":"","code":"data(param_zebsco)"},{"path":"/reference/param_zebsco.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of all parameters needed to run cnp_model for Zebrasoma scopas — param_zebsco","text":"object class list length 37.","code":""},{"path":"/reference/param_zebsco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of all parameters needed to run cnp_model for Zebrasoma scopas — param_zebsco","text":"","code":"data(param_zebsco)"},{"path":"/reference/plot_cnp.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to plot results model — plot_cnp","title":"A function to plot results model — plot_cnp","text":"function allows plot overview model results function total length fish","code":""},{"path":"/reference/plot_cnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to plot results model — plot_cnp","text":"","code":"plot_cnp(mod, y, x = \"tl\", probs = c(0.8, 0.95))"},{"path":"/reference/plot_cnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to plot results model — plot_cnp","text":"mod Model output cnp_model_mcmc() y Output variable(s) plotted. Can character character vector. x Variable put x-axis, \"biomass\" \"tl\" probs Width confidence","code":""},{"path":"/reference/plot_cnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to plot results model — plot_cnp","text":"ggplot object","code":""},{"path":"/reference/plot_cnp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to plot results model — plot_cnp","text":"","code":"library(fishflux) mod <- cnp_model_mcmc(TL = 5:15, param = list(           Qc_m = 40, Qn_m = 10, Qp_m = 4, Dn_sd = 0.05)) plot_cnp(mod = mod, y = c(\"Fp\", \"Gp\", \"Wp\", \"Ip\"),          x = \"tl\", probs = c(0.5, 0.8))  plot_cnp(mod = mod, y = \"Fp\", x = \"tl\",          probs = c(0.5, 0.8, 0.95))"},{"path":"/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to check the sensitivity of cnp_model predictions based on the variation of input parameters — sensitivity","title":"A function to check the sensitivity of cnp_model predictions based on the variation of input parameters — sensitivity","text":"function runs cnp_model fixing parameters SD's one test sensitivity","code":""},{"path":"/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to check the sensitivity of cnp_model predictions based on the variation of input parameters — sensitivity","text":"","code":"sensitivity(   TL,   param,   iter = 1000,   par,   out = c(\"Ic\", \"In\", \"Ip\", \"Gc\", \"Gn\", \"Gp\", \"Fc\", \"Fn\", \"Fp\", \"Wc\", \"Wn\", \"Wp\"),   ... )"},{"path":"/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to check the sensitivity of cnp_model predictions based on the variation of input parameters — sensitivity","text":"TL total length fish cm param list parameter means (\"_m\") standard deviations (\"_sd\") Default parameters set low sd's. See cnp_model_mcmc  list requested parameters iter positive integer specifying number iterations. default 1000 par Charachter vector specifying input parameter sd's used sensitivity. Charachter vector specifying output parameter sd's returned. ... arguments can used cnp_model_mcmc","code":""},{"path":"/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to check the sensitivity of cnp_model predictions based on the variation of input parameters — sensitivity","text":"Returns dataframe sd's model predictions. Row names indicate variable, sd used model run. Plots heatplot width 95%CI output predictions.","code":""},{"path":"/reference/sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to check the sensitivity of cnp_model predictions based on the variation of input parameters — sensitivity","text":"","code":"library(fishflux) sensitivity(TL = 10, param = list(k_sd = 0.2, Dn_sd = 0.2, Dc_sd = 0.1),             par = c(\"k_sd\",\"Dn_sd\",\"Dc_sd\"), out = c(\"Ic\", \"In\", \"Ip\", \"Gc\")) #> Joining with `by = join_by(key)`"},{"path":"/reference/trophic_level.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to find trophic level — trophic_level","title":"A function to find trophic level — trophic_level","text":"function find trophic level species either species genus level using rfishbase. returns data frame containing trophic level level trophic level found (species genus).","code":""},{"path":"/reference/trophic_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to find trophic level — trophic_level","text":"","code":"trophic_level(sp)"},{"path":"/reference/trophic_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to find trophic level — trophic_level","text":"sp character value containing species name","code":""},{"path":"/reference/trophic_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to find trophic level — trophic_level","text":"Returns dataframe species, trophic level, taxonomy level.","code":""},{"path":"/reference/trophic_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to find trophic level — trophic_level","text":"","code":"if (FALSE) { # \\dontrun{ library(fishflux) library(dplyr) trophic_level(\"Lutjanus griseus\") lapply(c(\"Chlorurus spilurus\",\"Zebrasoma scopas\"), trophic_level) %>%   bind_rows(.id = \".id\") } # }"},{"path":"/reference/weight_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame with dry weight/ wet weight proportions for multiple reef fish families. — weight_prop","title":"Data frame with dry weight/ wet weight proportions for multiple reef fish families. — weight_prop","text":"Data frame dry weight/ wet weight proportions multiple reef fish families.","code":""},{"path":"/reference/weight_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame with dry weight/ wet weight proportions for multiple reef fish families. — weight_prop","text":"","code":"data(weight_prop)"},{"path":"/reference/weight_prop.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame with dry weight/ wet weight proportions for multiple reef fish families. — weight_prop","text":"object class data.frame 15 rows 4 columns.","code":""},{"path":"/reference/weight_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame with dry weight/ wet weight proportions for multiple reef fish families. — weight_prop","text":"","code":"data(weight_prop)"},{"path":"/reference/wprop.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to find the ratio of dry weight and wet weight of fish in local database — wprop","title":"A function to find the ratio of dry weight and wet weight of fish in local database — wprop","text":"function searches ratio dry weight wet weight fish family level. family available, average returned.","code":""},{"path":"/reference/wprop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to find the ratio of dry weight and wet weight of fish in local database — wprop","text":"","code":"wprop(family)"},{"path":"/reference/wprop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to find the ratio of dry weight and wet weight of fish in local database — wprop","text":"family family","code":""},{"path":"/reference/wprop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to find the ratio of dry weight and wet weight of fish in local database — wprop","text":"Returns dataframe weight ratio (mdw) sd (mdw_sd).","code":""},{"path":"/reference/wprop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to find the ratio of dry weight and wet weight of fish in local database — wprop","text":"","code":"library(fishflux) wprop(family=\"Scaridae\") #>         mdw     mdw_sd #> 1 0.2372406 0.03458567"},{"path":[]},{"path":"/news/index.html","id":"minor-update-0-0-1-7","dir":"Changelog","previous_headings":"","what":"Minor update","title":"fishflux 0.0.1.7","text":"Increased R version dependency DESCRIPTION. Substituted deprecated dependency plyr::ldply dplyr::bind_rows. Updated deprecated dependency rfishbase::species_list aspect_ratio trophic_level.","code":""},{"path":"/news/index.html","id":"fishflux-0012","dir":"Changelog","previous_headings":"","what":"fishflux 0.0.1.2","title":"fishflux 0.0.1.2","text":"CRAN release: 2020-10-09","code":""},{"path":"/news/index.html","id":"minor-update-0-0-1-2","dir":"Changelog","previous_headings":"","what":"Minor update","title":"fishflux 0.0.1.2","text":"Added NEWS.md file track changes package. Fixed minor issue related internet resources used comply cran policy. ‘Packages use Internet resources fail gracefully informative message resource available changed (give check warning error).’","code":""}]
